base.folder=${user.dir}

###################
#    Resolvers    #
###################

# where to store (and cache) fetched resolver subnets
resolver.subnets.folder=${base.folder}/resolvers

# used to retrieve subnets of Google Public Resolver. dig TXT locations.publicdns.goog.
google.resolver.hostname=locations.publicdns.goog.
google.resolver.timeOutInSeconds=15

# where to retrieve subnets of OpenDNS resolver
opendns.resolver.url=https://www.opendns.com/network-map-data
opendns.fetcher.timeOutInSeconds=15

# where to retrieve subnets of CloudFlare resolver
cloudflare.subnets.ipv4.url=https://www.cloudflare.com/ips-v4
cloudflare.subnets.ipv6.url=https://www.cloudflare.com/ips-v6
cloudflare.subnets.timeOutInSeconds=15

# quad9 subnets are read from resources file (no way to fetch externally)

###############
#   PCAP      #
###############
# name of the bucket where the raw PCAP files are stored
pcap.bucket.name=

# s3 bucket where processed PCAP files should be moved
pcap.archive.bucket.name=

# name of prefix within pcap.archive.bucket.name where processed PCAP files should be stored
pcap.archive.prefix=archive

# full path of folder where downloaded PCAP files should be stored
pcap.download.folder=${base.folder}/downloaded-pcaps

pcap.download.maxFiles=1

# Suffix to append to downloaded PCAP files when not yet present
pcap.expected.suffix=.pcap.gz

# full path to the folder where the state of the pcap-to-parquet conversion are stored
pcap.decoder.state.dir=${base.folder}/pcap-decoder-state

pcap.delete.after.conversion=true

pcap.folders.newStyle=false

###############
#   Parquet   #
###############
# base folder for writing parquet files. (parquet files will be in subfolders of this one)
parquet.output.folder=${base.folder}/parquet

# name of the S3 bucket where the Parquet files should be uploaded
#parquet.bucket.name=dns-querylogs-parquet
parquet.bucket.name=

# this folder will be created inside parquet.output.folder (and the S3 key will also start with this name)
parquet.repo.name=dnsdata

# name of prefix within {parquet.bucket.name} where parquet files should be stored
parquet.prefix=

parquet.delete.after.upload=true

###############
#   MaxMind   #
###############
# where to find (or store) the MaxMind files
geoIP.maxmind.folder=${base.folder}/maxmind


#################
#  AWS config   #
#################
# Needs to be false when not running on EC2
cloud.aws.stack.auto=false
cloud.aws.region.static=eu-west-1
cloud.aws.credentials.useDefaultAwsCredentialsChain=true

spring.main.banner-mode=off

spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

# Suffix for name server names when short names are used
server.suffix=

##########
# Athena #
##########
# Avoid database/table names containing hyphens cause some statements will not work, even when quoted.
athena.database.name=
athena.table.name=
athena.workgroup=primary

servers=
serverNames=

athena.driver.name=com.simba.athena.jdbc.Driver
athena.url=jdbc:awsathena://AwsRegion=eu-west-1;
# where Athena will store the results of queries
athena.output.location=s3://${parquet.bucket.name}/pcap.processor.athena.output/
athena.log.path=${base.folder}/athena-logs/

##########################
# PCAP reader config
##########################

pcap.reader.cache.timeout.ms=1000
pcap.reader.tcp.flow.cache.timeout.ms=1000
pcap.reader.fragemented.ip.cache.timeout.ms=1000
pcap.reader.bufferSize.bytes=65536

pcap.reader.queue.size=100000

##############
#  LOGGING   #
##############
logging.level.root=WARN
logging.level.be.dnsbelgium=INFO
logging.level.org.springframework=INFO
